<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://clash-meta.github.io/news/article-18784.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>spring boot 基础学习 &#8211; thymeleaf页面模板技术</title>
        <meta name="description" content="3.2引入html代码  3.3 变量  3.7 对象选择表达式：  8.1 基本内置对象： 目录  			  随着互联网技术的发展，页面静态化的需求越来越明显，传统的jsp动态页面逐渐的被html静" />
        <link rel="icon" href="__ADDON__/img/clash_meta/favicon.ico" type="image/x-icon"/>
    <link href="//fonts.googleapis.com/css2?family=Jost:wght@300;400;500&display=swap" rel="stylesheet">
    <link href="//fonts.googleapis.com/css2?family=Open+Sans:wght@400;600&display=swap" rel="stylesheet">
    <!-- Template CSS -->
    <link rel="stylesheet" href="/assets/website/css/clash_meta/style-starter.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-SJF0YS0LDW"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-SJF0YS0LDW');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <!--header-->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke px-0 pt-lg-0">
                                <a class="navbar-brand" href="/">
                    Clash Meta
                </a>
                                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav mx-lg-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/free-nodes/">免费节点</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/news/">新闻资讯</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="mobile-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!--/header-->
    <!-- about breadcrumb -->
    <section class="w3l-about-breadcrumb">
        <div class="breadcrumb-bg breadcrumb-bg-about py-5">
            <div class="container pt-lg-5 pt-md-3 p-lg-4 pb-md-3 my-lg-5">
                <h1 class="title pt-5">spring boot 基础学习 &#8211; thymeleaf页面模板技术</h1>
                <ul class="breadcrumbs-custom-path mt-3 text-center">
                    <li><a href="/">首页</a></li>
                    <li><a href="/news/"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 新闻资讯</a></li>
                    <li class="active"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 正文</li>
                </ul>
            </div>
        </div>
    </section>
    <!-- //about breadcrumb -->
    <section class="w3l-homeblock1">
        <div class="midd-w3 py-5">
            <div class="container py-lg-5 py-md-4 py-2">
                <div class="row">
                    <div class="col-md-9">
                                          				  				  				  			 <div id="log-box">  				<div id="catalog"><ul id="catalog-ul"> <li><i class="be be-arrowright"></i> <a href="#title-0" title="3.2引入html代码">3.2引入html代码</a></li> <li><i class="be be-arrowright"></i> <a href="#title-1" title="3.3 变量">3.3 变量</a></li> <li><i class="be be-arrowright"></i> <a href="#title-2" title="3.7 对象选择表达式：">3.7 对象选择表达式：</a></li> <li><i class="be be-arrowright"></i> <a href="#title-3" title="8.1 基本内置对象：">8.1 基本内置对象：</a></li> </ul><span class="log-zd"><span class="log-close"><a title="隐藏目录"><i class="be be-cross"></i><strong>目录</strong></a></span></span></div>  			</div> <div id="content_views" class="htmledit_views"> <p>随着互联网技术的发展，页面静态化的需求越来越明显，传统的jsp动态页面逐渐的被html静态页面+ajax异步请求所替代，模板技术解决了静态页面的数据更新问题。这篇博客主要是结合spring boot 来介绍一下 thymeleaf模板技术。</p> <h5>thymelaaf的特点：<br /> a.html格式，</h5> <p>模板直接交给浏览器渲染。</p> <h5>b.实现真正意义上的前后端分离，</h5> <p>在标签上引用了thymeleaf表达式后，当页面被浏览器解析后，标签内原有的内容将被表达式的值替换，前端人员只需要将页面演示内容填写好，后台人员你需要要编写正确的表达式返回正确的值，页面就能达到想要的效果。</p> <h5>c.页面即原型，所见即所得</h5> <h6></h6> <p style="margin-bottom:10px; color:rgb(51,51,51); font-family:'Helvetica Neue',Arial,'Hiragino Sans GB','Microsoft Yahei'; font-size:14px; background-color:rgb(255,255,255)"><span style="font-weight:normal">在Web开发过程中一个绕不开的话题就是前端工程师与后端工程师的协作，在传统Java Web开发过程中，前端工程师和后端工程师一样，也需要安装一套完整的开发环境，然后各类Java IDE中修改模板、静态资源文件，启动/重启/重新加载应用服务器，刷新页面查看最终效果。</span></p> <p style="margin-bottom:10px; color:rgb(51,51,51); font-family:'Helvetica Neue',Arial,'Hiragino Sans GB','Microsoft Yahei'; font-size:14px; background-color:rgb(255,255,255)"><span style="font-weight:normal">但实际上前端工程师的职责更多应该关注于页面本身而非后端，使用JSP，Velocity等传统的Java模板引擎很难做到这一点，因为它们必须在应用服务器中渲染完成后才能在浏览器中看到结果，而Thymeleaf从根本上颠覆了这一过程，通过属性进行模板渲染不会引入任何新的浏览器不能识别的标签，例如JSP中的<code style="font-size:13px; font-family:Consolas,'Liberation Mono',Menlo,Courier,monospace; color:rgb(199,37,78); padding-right:2px; padding-left:2px; margin:0px 3px">&lt;form:input&gt;</code>，不会在Tag内部写表达式。整个页面直接作为HTML文件用浏览器打开，几乎就可以看到最终的效果，这大大解放了前端工程师的生产力，它们的最终交付物就是纯的HTML/CSS/JavaScript文件。</span></p> <h3>1.依赖</h3> <div>  spring boot 余thymeleaf整合非常的方便，只需要在pom中添加一个依赖即可：</div> <div><span class="space" style="white-space:pre; display:inline-block; text-indent:2em; line-height:inherit"></span></p> <pre><code class="language-java">&lt;dependency&gt; 	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; 	&lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt; &lt;/dependency&gt;</code></pre> <p> spring boot 默认会将templates目录映射为模板目录，因此你只需要讲你的模板放在templates目录下即可。</p></div> <div> <h3>2.配置</h3> <p> 添加了上述依赖之后，spring boot实际上为我们初始化了很多基本配置，我们只需要简单的配置一下页面类型即可，这些配置都简单易懂：</p></div> <div> <pre><code class="language-java">#thymeleaf start spring.thymeleaf.mode=HTML5 spring.thymeleaf.encoding=UTF-8 spring.thymeleaf.content-type=text/html spring.thymeleaf.cache=false #关闭页面缓存，这样才能实时的看到页面更改 #thymeleaf end</code></pre> <p> 然后你就可以开始编写你的页面模板了，但是需要注意，为了让thymeleaf识别一个模板，你必须使用下面的html头标签：</p> <pre><code class="language-html">&lt;html xmlns:th="http://www.thymeleaf.org"&gt; ... &lt;/html&gt;</code></pre> <p> 这样thymeleaf才能真缺德解析！</p></div> <div>  下面就可以开始编写模板了！</div> <div></div> <h3><span style="color:#000000">3.语法</span></h3> <div><span style="color:rgb(79,79,79); text-align:justify">thymeleaf表达式风格和jsp的EL表达式，Struts的OGNL表达式风格非常类似，所以如果你熟悉上面的表达式的话，thymeleaf的表达式对你来说也和简单,不同的是，thymeleaf的表达值写在html标签的开始标签内，而不像EL表达式那样，可以充斥在页面的任何位置！</span></div> <h4><span style="color:rgb(79,79,79); text-align:justify">3.1 引入普通文本，数字 th:text</span></h4> <h6 style="text-align:justify"><span style="font-weight:normal">尽管使用模板动态的为页面添加普通文本并没有什么意义，但是还是值得一提，铜鼓他，我们将引入thymeleaf中一个常用的标签th：text="文本内容";</span></h6> <h6 style="text-align:justify"><span style="font-weight:normal">这个标签的作用就是将文本内容填充到表达式作用的标签内：例如在模板中这样写</span></h6> <pre><code class="language-html">&lt;p th:text="'你好，thymeleaf~~~"&gt; hello world!&lt;/p&gt;</code></pre> <p> 显示到页面的效果为：<br /><img decoding="async" src="http://img.555519.xyz/uploads/20221117/53e11059551e99d74640710814931cd8.jpg" alt="spring boot 基础学习 - thymeleaf页面模板技术"></p> <span class="directory"></span><h4 id="title-0">3.2引入html代码</h4> <h6><span style="font-weight:normal">通th:text的方式，我们只能想页面引入纯文本，即便是你提供的是带有html格式的代码，thymeleaf也会将他解析为普通的文本，不过，我们可以通过th:utext标签来为页面引入html,这样thymeleaf就会将文本内容解析为html代码并交给浏览器渲染，例如：</span></h6> <h6><span style="font-weight:normal"></span></h6> <pre><code class="language-html">&lt;p th:utext="'lt;font color=\'red\'&amp;gt; 你好，thymeleaf~~~&amp;gt;/font&gt;'"&amp;gt; hello world!&lt;/p&gt;</code></pre> <h6>效果：</h6> <h6><img decoding="async" src="http://img.555519.xyz/uploads/20221117/8e914812da09e89db161dea62594305c.jpg" alt="spring boot 基础学习 - thymeleaf页面模板技术"><br /></h6> <h6><span style="color:rgb(153,0,0)">不过需要注意的是，&lt;,&gt;这两个标签符号由于会和已有的html中标签产生冲突，所以需要用html预定义符号&amp;lt,&amp;gt代替。</span><br /></h6> <span class="directory"></span><h4 id="title-1">3.3 变量</h4> <p>在thymeleaf中，可以使用${变量名}来向页面中引入一个变量:</p> <div> <pre><code class="language-html">&lt;h1 th:text="'hello,' + ${name} + '!'"&gt;测试文本！&lt;/h1&gt;</code></pre> <p> controller代码：</p> <pre><code class="language-java">@RequestMapping("/hello") public String hello(Model model) { 	System.out.println("一个访问..."); 	model.addAttribute("name", "thymeleaf"); 	return "hello"; }</code></pre> <p> 当我们访问action时，页面效果为：</p> </div> <div><img decoding="async" src="http://img.555519.xyz/uploads/20221117/10599c5f5d624a5c9ca285786aa305b7.jpg" alt="spring boot 基础学习 - thymeleaf页面模板技术"></div> <div style="text-align:left">  你会发现，我们在标签中填写的内容不见了，这是应为thymeleaf在解析模板时，会将在pageContext中去这些变量，并直接替换掉页面标签中原有的内容！<span style="color:#cc0000">而且，和我们在java中一样，我们可以使用“+”将字符串与变量拼接起来！</span></div> <div style="text-align:left"></div> <h4 style="text-align:left"><strong>3.4 url</strong></h4> <div style="text-align:left">  在thymeleaf中如果你需要引入一个url,你可以使用th:href = @{url} 或者 th:src=@{url}等等标签，看样子就很明白，基本上就是将html标签的属性名前面加上th:,例如：</div> <div style="text-align:left"> <pre><code class="language-html">&lt;img alt="测试图片" th:src="@{http://www.thymeleaf.org/images/thymeleaf.png}" width="120" height="120"/&gt;</code></pre> <div style="text-align:left"> <div><strong><strong><img decoding="async" src="http://img.555519.xyz/uploads/20221117/6eb2ff22e0465456bc27f0fb729116da.jpg" alt="spring boot 基础学习 - thymeleaf页面模板技术"></strong><br /></strong></div> <div><strong>如果假设：</strong></div> <div>    网站的context路径为http:localhost:9020/start/，当前页面的地址为：http:localhost:9020/start/test/hello.action</div> <p></div> <p> 你也可以使用相对路径：th:href=@{user/login.action}</p></div> <div style="text-align:left"></div> <div style="text-align:left"><strong>例如：</strong></p> <pre><code class="language-html">&lt;a th:href="@{user/login.action}"&gt;转到登录页面&lt;/a&gt; 或者 &lt;a th:href="@{./user/login.action}"&gt;转到登录页面&lt;/a&gt;</code></pre> <p><span style="color:#cc0000">上面两种心事的路径被解析后的结果都为：http://localhost:9020/start</span><span style="color:#006600">/test/</span><span style="color:#cc0000">user/login.action</span><strong></strong></div> <div style="text-align:left"> 或者你也可使用基于context的绝对路径：th:href=@{/user/login.action},</div> <div style="text-align:left"><span style="color:#cc0000">这个时候解析的结果则为：http://localhost:9020/start/user/login.action</span></div> <div style="text-align:left"></div> <div style="text-align:left">  怎么样，看出区别来了吗？</div> <div style="text-align:left"></div> <div style="text-align:left"><strong><span style="color:#006600">当然，不仅仅是超链接，其他的html标签的属性你一样也可以使用th:属性名=${...}的形式为这些属性动态的设置值</span></strong></div> <div style="text-align:left"><strong><br /></strong></div> <h4 style="text-align:left"><strong>3.5 Url参数拼接：</strong></h4> <div style="text-align:left">  thymeleaf中支持一种简单的参数拼接到url上，即使用圆括号（参数名=参数值）的形式，其中参数名和参数值都可以使用变量，例如：</div> <div style="text-align:left"><strong><br /></strong></div> <div style="text-align:left"><strong></strong></p> <pre><code class="language-html">// 多个参数键值对用','隔开 &lt;a th:href="@{/user/login.action(id=${user.id},name=${user.name})}" &gt;用户信息&lt;/a&gt;</code></pre> <p> 解析后的url为：</p> <pre><code class="language-html"> /start/user/login.action?id=111&amp;name=bug4j</code></pre> <p><strong><span style="color:#990000">thymeleaf会自动加上相应的?与&amp;,</span></strong></p> <h4><span style="color:#333333">3.6 消息表达式#{...}</span></h4> <h6><span style="color:#333333; font-weight:normal">消息表达式允许你再模板页面上读取消息源里面的静态内容，消息源可以是配置文件，数据库等，消息配置文件实际就是一个properties文件，文件内容为key=value形式的键值对。</span></h6> <h6><span style="color:#333333; font-weight:normal">如果你使用spring boot的默认配置，那么配置文件的名称为messages.properties,他必须放在resource根目录下，这样thymeleaf才能找到。</span></h6> <h6><span style="color:#333333; font-weight:normal">消息表达式常用于加载静态文本内容，之所以吧静态内容提取为消息，是为了能方便的集中管理页面上某些可能会变动的内容。</span></h6> <h6><span style="color:#333333; font-weight:normal">例子：</span></h6> <h6><span style="color:#333333; font-weight:normal">配置文件：</span></h6> <h6><span style="color:#333333; font-weight:normal"><img decoding="async" src="http://img.555519.xyz/uploads/20221117/4bfc26efded45553d815f340232d13aa.jpg" alt="spring boot 基础学习 - thymeleaf页面模板技术"><br /></span></h6> <h6><span style="color:#333333; font-weight:normal">页面内容：</span></h6> <h6><span style="color:#333333; font-weight:normal"></span></h6> <pre><code class="language-html">&lt;p&gt; 	&lt;h1 th:text="#{home.hello}"&gt;你好，这是一条消息&lt;/h1&gt; &lt;/p&gt;</code></pre> <p> 访问效果：</p> <h6><span style="color:#333333; font-weight:normal"><img decoding="async" src="http://img.555519.xyz/uploads/20221117/7723b0fc470ba46f74bc84c484aa05de.jpg" alt="spring boot 基础学习 - thymeleaf页面模板技术"><br /> 另外，thymeleaf还支持在文件名上指定语言的消息配置文件，例如，要想某个配置文件只对中文有效，可以将配置文件的名称命名为：messages_zh_CN.properties，那么，当你的操作系统的的语言为简体中文时，你访问页面是页面内的消息将从这个带有语言表示的消息源中读取。</span></h6> <h6><span style="color:#333333; font-weight:normal"></span></h6> <span class="directory"></span><h4 id="title-2">3.7 对象选择表达式：</h4> <p> 和变量表达式一样，对象选择表达式也可以从一个对象中获取某个特定的值使用，而且他的语法与变量表达式完全一致，不同的是，对象选择表达式必须从父标签中声明的对象中获取内容，而不是从任意对象中获取。</p> <h6><span style="color:#333333"><span style="font-weight:400">因此，要想使用对象选择表达式，你必须通过th:object在要使用的元素标签的父标签上获取到内容源对象：格式为：th:object&nbsp; ect="${...}".例如：</span></span></h6> <h6><span style="color:#333333"><span style="font-weight:400"></span></span></h6> <pre><code class="language-html">&lt;p th:object="${user}"&gt; 	&lt;h1 th:text="'标号：'+*{id}"&gt;id&lt;/h1&gt; 	&lt;h1 th:text="'姓名：'+*{name}"&gt;name&lt;/h1&gt; 	&lt;h1 th:text="'性别'+*{sex}"&gt;sex&lt;/h1&gt; &lt;/p&gt;</code></pre> <p> 页面效果为：</p> <h6><span style="color:#333333"><span style="font-weight:400"><img decoding="async" src="http://img.555519.xyz/uploads/20221117/584201393af64fa5655c5c665ee93e8c.jpg" alt="spring boot 基础学习 - thymeleaf页面模板技术"><br /></span></span></h6> <h6><span style="color:#333333; font-weight:normal"><br /></span></h6> <h3><span style="color:#000000">4.运算符</span></h3> <h6><span style="color:#333333; font-weight:normal">thymeleaf中支持java中的各类运算符如+，-，*，/,%等，也支持各类逻辑运算符，如&gt;,&lt;,&gt;=,&lt;=,==,!=等,甚至java中的三目运算符？都可以使用，</span><span style="color:#990000; font-weight:normal">不过需要注意的是，&lt;,&gt;这两个运算符由于会和html中标签产生冲突，所以需要用html预定义符号&amp;lt,&amp;gt代替。</span></h6> <h6><span style="color:#333333; font-weight:normal">例如：</span></h6> </div> <div style="text-align:left"><strong><span style="color:#333333"></span></strong></p> <pre><code class="language-html">&lt;p&gt;3等于4吗？答案是：&lt;span th:text="3==4?'正确':'错误'"&gt;答案&lt;/span&gt;&lt;/p&gt; &lt;p&gt;50大于30吗？答案是：&lt;span th:text="50 &amp;gt; 30?'正确':'错误'"&gt;答案&lt;/span&gt;&lt;/p&gt;</code></pre> <p> 页面结果为：</p></div> <div style="text-align:left"><strong><span style="color:#333333"><br /><img decoding="async" src="http://img.555519.xyz/uploads/20221117/2a18df9cbf9151c536948f75ce5aa484.jpg" alt="spring boot 基础学习 - thymeleaf页面模板技术"><br /></span></strong></div> <h3 style="text-align:left"><strong><span style="color:#000000">5.条件判断if/unless:</span></strong></h3> <h6 style="text-align:left"><span style="color:#333333">条件判断if/unlesse可以根据某个调价是否成立来控制标签内容是否显示，</span></h6> <h6 style="text-align:left"><span style="color:#333333">if：当if条件成立时，内容显示，例如：</span></h6> <div style="text-align:left"><strong><span style="color:#333333"></span></strong></p> <pre><code class="language-html">&lt;p th:if="${user.id} &gt; 1"&gt;用户的id大为111，于1,所以能显示这些&lt;/p&gt;</code></pre> <p> 而页面显示的结果为：</p> </div> <div style="text-align:left"><strong><span style="color:#333333"><img decoding="async" src="http://img.555519.xyz/uploads/20221117/a60dfdbd3146d23b86bc84844b1a21c3.jpg" alt="spring boot 基础学习 - thymeleaf页面模板技术"><br /></span></strong></div> <div style="text-align:left"><strong><span style="color:#333333">而unless则恰好和if相反，当条件满足是不显示：</span></strong></div> <div style="text-align:left"><strong><span style="color:#333333"><br /></span></strong></div> <div style="text-align:left"><strong><br /></strong></div> <div style="text-align:left"><strong></strong></p> <pre><code class="language-html">&lt;p th:unless="${user.name == null }"&gt;当“用户名称为空”这个条件不成立就显示, 用户名为：&lt;span th:text="${user.name}"&gt;用户名&lt;/span&gt;&lt;/p&gt;</code></pre> <p> 页面解过为：<br /><img decoding="async" src="http://img.555519.xyz/uploads/20221117/b5d25233ebde1cf6c936affbcbb99f8b.jpg" alt="spring boot 基础学习 - thymeleaf页面模板技术"></div> <h3 style="text-align:left"><strong><span style="color:#000000">6.循环 th:each：</span></strong></h3> <div style="text-align:left">  循环表达式和其他表达式语言很类似，同样是用“:”将单个变量与即可变量组合，然后就可以在标签范围内使用了。</div> <div style="text-align:left"> <pre><code class="language-html">&lt;tr th:each="user : ${users}" align="center"&gt; 	&lt;td th:text="${user.id}"&gt;666&lt;/td&gt; 	&lt;td th:text="${user.name}"&gt;name&lt;/td&gt; 	&lt;td th:text="${user.sex}"&gt;sex&lt;/td&gt; &lt;/tr&gt;</code></pre> <address rel="nofollow">得到的结果为：</address> </div> <h6 style="text-align:left"><img decoding="async" src="http://img.555519.xyz/uploads/20221117/b424f456e2b48151f8ec9bec07171dc5.jpg" alt="spring boot 基础学习 - thymeleaf页面模板技术"><br /></h6> <h3><span style="color:#000000">7.分支条件判断表达式：th:switch</span></h3> <div style="text-align:left">  thymeleaf中还允许我们使用java风格的switch语句，你可在html父元素上使用th:switch=来指定要判断的变量，在子标签上用case=变量来声明当前标签内容对应的选项值，例如下面的例子：</div> <div style="text-align:left"><strong><br /></strong></div> <div style="text-align:left"><strong></strong></p> <pre><code class="language-html">&lt;div th:switch="${user.name}"&gt; 	&lt;h1&gt;&lt;p th:case="bug4j"&gt;他是博主&lt;/p&gt;&lt;/h1&gt; 	&lt;h1&gt;&lt;p th:case="liuyifei"&gt;这是博主女朋友&lt;/p&gt;&lt;/h1&gt; 	&lt;h1&gt;&lt;p th:case="*"&gt;你是游客&lt;/p&gt;&lt;/h1&gt; &lt;/div&gt;</code></pre> <address rel="nofollow"><strong>结果是：</strong></address> </div> <div style="text-align:left"><strong><img decoding="async" src="http://img.555519.xyz/uploads/20221117/75105dd67f03779d48dd7536b7c05bdf.jpg" alt="spring boot 基础学习 - thymeleaf页面模板技术"><br /> 当然，你可以用 * 表示没有选项匹配是的默认值，类似于java中的default.</strong></div> <h3 style="text-align:left"><span style="color:#000000">8.Utilities工具集</span></h3> <span class="directory"></span><h4 id="title-3">8.1 基本内置对象：</h4> <h6><span style="font-weight:normal">基本内置对象类似于jsp的内置对象，基本上就是将域对象转换了个形式，基本内置对象一共有如下几个：</span></h6> <div style="text-align:left"> <h6></h6> <ol> <li>#ctx：上下文对象。</li> <li>#vars: 上下文变量。</li> <li>#locale：上下文语言环境。</li> <li>#request:(只在Web上下文中）HttpServletRequest对象。</li> <li>#response:(只在Web上下文中）HttpServletResponse对象。</li> <li>#session:(只在Web上下文中）HttpSession对象。</li> <li>#servletContext:(只在Web上下文中）ServletContext对象。</li> </ol> </div> <div style="text-align:left">  例如我们可以这么用：</div> <div style="text-align:left"> <pre><code class="language-html">你的操作系统语言环境为： 	&lt;span th:text="${#locale.language}"&gt;&lt;/span&gt;,&lt;span th:text="${#locale.displayCountry}"&gt;&lt;/span&gt;,&lt;span th:text="${#ctx.locale}"&gt;&lt;/span&gt;</code></pre> <p> 页面效果为：</p></div> <div style="text-align:left"></div> <div style="text-align:left"><img decoding="async" src="http://img.555519.xyz/uploads/20221117/9a3c04c449a35777eb28d71bb41b5bc2.jpg" alt="spring boot 基础学习 - thymeleaf页面模板技术"></div> <div style="text-align:left">  实际上，#locale等同于JDK中的java.util.Locale类，我们使用#locale可以直接调用这个类的public属性以及方法！而且，如果你的表达式是有错误，后台异常信息里面显示的是java.util.locale的异常。</div> <div style="text-align:left"></div> <h4 style="text-align:left">8.2 表达式工具对象</h4> <div style="text-align:left">  除了这些基本的对象之外，Thymeleaf还会为我们提供一套实用对象，帮助我们在表达式中执行常见任务。</p> <ol> <li>#execInfo：关于正在处理的模板的信息。</li> <li>#messages：在变量表达式中获得外部化消息的方法，与使用＃{...}语法获得的方式相同。</li> <li>#uris：用于转义URL / URI部分的方法</li> <li>#conversions：执行配置的转换服务的方法（如果有的话）。</li> <li>#dates：java.util.Date对象的方法：格式化，组件提取等</li> <li>#calendars：类似于#dates，但是对于java.util.Calendar物体。</li> <li>#numbers：格式化数字对象的方法。</li> <li>#strings：String对象的方法：contains，startsWith，prepending / appending等</li> <li>#objects：一般对象的方法。</li> <li>#bools：布尔评估的方法。</li> <li>#arrays：数组的方法。</li> <li>#lists：列表的方法。</li> <li>#sets：套的方法。</li> <li>#maps：map集合的方法。</li> <li>#aggregates：在数组或集合上创建聚合的方法。</li> <li>#ids：处理可能重复的id属性的方法（例如，作为迭代的结果）。</li> </ol> </div> <div style="text-align:left">  例如我们可以利用<span style="font-size:14px">#calendars对象对后台传来的日期对象格式化：</span></div> <div style="text-align:left"> <pre><code class="language-java">// controller代码 	Date today = new Date(); 	model.addAttribute("today", today);</code></pre> <p> 模板代码：</p></div> <div style="text-align:left"> <pre><code class="language-html">今天是:&lt;span th:text="${#calendars.format(today,'yyyy 年 MM 月 dd 日')}"&gt;xxxx年xx月xx日&lt;/span&gt;</code></pre> <p> 页面效果为：</p></div> <div style="text-align:left"><img decoding="async" src="http://img.555519.xyz/uploads/20221117/6bb3b1c434fd302981b47dff8af7ff6a.jpg" alt="spring boot 基础学习 - thymeleaf页面模板技术"></div> <div style="text-align:left"> <div style="text-align:center"></div> <p> 更多关于thymeleaf的用法请参见：<a target="_blank" href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://www.thymeleaf.org/documentation.html"  rel="nofollow">thymeleaf官方文档</a></div> </div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>下一个：<a href="/news/article-18785.htm">数据库基础知识详解四：存储过程、视图、游标、SQL语句优化以及索引</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2024-11-26-free-node-subscribe.htm" title="11月26日 | Clash Meta每天更新21.7M/S免费节点订阅链接">11月26日 | Clash Meta每天更新21.7M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-17-latest-clash-meta-node.htm" title="11月17日 | Clash Meta每天更新18.4M/S免费节点订阅链接">11月17日 | Clash Meta每天更新18.4M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-23-clash-meta-node-share.htm" title="11月23日 | Clash Meta每天更新18.3M/S免费节点订阅链接">11月23日 | Clash Meta每天更新18.3M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-8-17-node-share.htm" title="8月17日 | Clash Meta每天更新18.3M/S免费节点订阅链接">8月17日 | Clash Meta每天更新18.3M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-9-23-today-clash-meta-node.htm" title="9月23日 | Clash Meta每天更新19.5M/S免费节点订阅链接">9月23日 | Clash Meta每天更新19.5M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-25-node-share-links.htm" title="11月25日 | Clash Meta每天更新19M/S免费节点订阅链接">11月25日 | Clash Meta每天更新19M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-30-free-high-speed-nodes.htm" title="11月30日 | Clash Meta每天更新22.1M/S免费节点订阅链接">11月30日 | Clash Meta每天更新22.1M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-9-6-free-subscribe-node.htm" title="9月6日 | Clash Meta每天更新22.8M/S免费节点订阅链接">9月6日 | Clash Meta每天更新22.8M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-18-clash-meta-node.htm" title="11月18日 | Clash Meta每天更新18.2M/S免费节点订阅链接">11月18日 | Clash Meta每天更新18.2M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-9-5-node-share.htm" title="9月5日 | Clash Meta每天更新18M/S免费节点订阅链接">9月5日 | Clash Meta每天更新18M/S免费节点订阅链接</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">34</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-10/" title="2024-10 归档">2024-10</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-09/" title="2024-09 归档">2024-09</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">29</span> <a href="/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </div>
    </section>
        <!-- footer -->
    <section class="w3l-footer-29-main">
        <!-- copyright -->
        <section class="w3l-copyright text-center">
            <div class="container">
                <p class="copy-footer-29">
                Clash Meta免费节点订阅站 版权所有 Powered by WordPress
                </p>
            </div>
            <!-- move top -->
            <button onclick="topFunction()" id="movetop" title="Go to top">
                &#10548;
            </button>
            <script>
            // When the user scrolls down 20px from the top of the document, show the button
            window.onscroll = function() {
                scrollFunction()
            };

            function scrollFunction() {
                if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                    document.getElementById("movetop").style.display = "block";
                } else {
                    document.getElementById("movetop").style.display = "none";
                }
            }

            // When the user clicks on the button, scroll to the top of the document
            function topFunction() {
                document.body.scrollTop = 0;
                document.documentElement.scrollTop = 0;
            }
            </script>
            <!-- /move top -->
        </section>
        <!-- //copyright -->
    </section>
    <!-- //footer -->
    <!-- all js scripts and files here -->
    <script src="/assets/website/js/frontend/clash_meta/theme-change.js"></script><!-- theme switch js (light and dark)-->
    <script src="/assets/website/js/frontend/clash_meta/jquery-3.5.1.min.js"></script><!-- default jQuery -->
    <script src="/assets/website/js/frontend/clash_meta/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- bootstrap js -->
    <script src="/assets/website/js/frontend/clash_meta/bootstrap.min.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>