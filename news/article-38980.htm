<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://clash-meta.github.io/news/article-38980.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>SpringBoot(39) —— Shiro实现登陆拦截</title>
        <meta name="description" content="1.实现登陆拦截   实现登陆拦截其实就是使用shiro拦截没有经过认证的用户的请求，当用户在没有认证的情况下就请求资源时，就将其重定向到登陆认证页面，这一点和spring security一样   " />
        <link rel="icon" href="/assets/website/img/clash_meta/favicon.ico" type="image/x-icon"/>
    <link href="//fonts.googleapis.com/css2?family=Jost:wght@300;400;500&display=swap" rel="stylesheet">
    <link href="//fonts.googleapis.com/css2?family=Open+Sans:wght@400;600&display=swap" rel="stylesheet">
    <!-- Template CSS -->
    <link rel="stylesheet" href="/assets/website/css/clash_meta/style-starter.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-SJF0YS0LDW"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-SJF0YS0LDW');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <!--header-->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke px-0 pt-lg-0">
                                <a class="navbar-brand" href="/">
                    Clash Meta
                </a>
                                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav mx-lg-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/free-nodes/">免费节点</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/news/">新闻资讯</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="mobile-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!--/header-->
    <!-- about breadcrumb -->
    <section class="w3l-about-breadcrumb">
        <div class="breadcrumb-bg breadcrumb-bg-about py-5">
            <div class="container pt-lg-5 pt-md-3 p-lg-4 pb-md-3 my-lg-5">
                <h1 class="title pt-5">SpringBoot(39) —— Shiro实现登陆拦截</h1>
                <ul class="breadcrumbs-custom-path mt-3 text-center">
                    <li><a href="/">首页</a></li>
                    <li><a href="/news/"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 新闻资讯</a></li>
                    <li class="active"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 正文</li>
                </ul>
            </div>
        </div>
    </section>
    <!-- //about breadcrumb -->
    <section class="w3l-homeblock1">
        <div class="midd-w3 py-5">
            <div class="container py-lg-5 py-md-4 py-2">
                <div class="row">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <h2> <a id="1_1" rel="nofollow"></a>1.实现登陆拦截</h2> <ul> <li> <p>实现登陆拦截其实就是使用shiro拦截没有经过认证的用户的请求，当用户在没有认证的情况下就请求资源时，就将其重定向到登陆认证页面，这一点和spring security一样</p> </li> <li> <p>要实现认证+授权，本质上还是在使用过滤器/拦截器，而spring security只是把这些都封装好了，我们直接调用封装之后的方法就可以使用；而Shiro对于过滤器/拦截器的封装没有spring security那么彻底，所以我们需要在刚刚创建的config中的ShiroFilterFactoryBean中配置我们要加上的过滤器/拦截器来实现认证+授权</p> </li> <li> <p>shiro中有如下5种常用过滤器(<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/qq_37840993/article/details/107693337?utm_medium=distribute.pc_relevant.none-task-blog-title-1&amp;spm=1001.2101.3001.4242"  rel="nofollow">shiro常用过滤器</a>)</p> <ul> <li>anon：无需认证即可访问</li> <li>authc：必须认证才能访问</li> <li>user：必须有"记住我"功能才能访问【几乎不用】</li> <li>perms：拥有对某个资源的访问权限才能访问【比如某系资源只有管理员可以访问】</li> <li>role：拥有某个角色才能访问</li> </ul> </li> <li> <p><mark>shiro中过滤器的使用语法：map集合.put(“需要过滤的URL”,“要使用的过滤器”)</mark></p> </li> <li> <p>配置过滤器</p> <pre><code class="prism language-java"><span class="token comment">//这是上一篇博客写好的装配到spring容器中的ShiroFilterFactoryBean</span> <span class="token annotation punctuation">@Bean</span> <span class="token keyword">public</span> ShiroFilterFactoryBean <span class="token function">shiroFilterFactoryBean</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"securityManager"</span><span class="token punctuation">)</span> DefaultWebSecurityManager securityManager<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>     ShiroFilterFactoryBean bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShiroFilterFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//设置安全管理器</span>     bean<span class="token punctuation">.</span><span class="token function">setSecurityManager</span><span class="token punctuation">(</span>securityManager<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> bean<span class="token punctuation">;</span> <span class="token punctuation">}</span> </code></pre> </li> <li> <p>配置我们指定的过滤器需要调用bean.setFilterChainDefinitionMap()，即为设置过滤器链需要向这个方法中传入一个Map集合，我们可以查看这个方法的定义</p> <pre><code class="prism language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setFilterChainDefinitionMap</span><span class="token punctuation">(</span>Map<span class="token generics function"><span class="token punctuation">&lt;</span>String<span class="token punctuation">,</span> String<span class="token punctuation">&gt;</span></span> filterChainDefinitionMap<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>     <span class="token keyword">this</span><span class="token punctuation">.</span>filterChainDefinitionMap <span class="token operator">=</span> filterChainDefinitionMap<span class="token punctuation">;</span> <span class="token punctuation">}</span> </code></pre> </li> <li> <p>可见确实需要传入一个Map集合，所以在shiroFilterFactoryBean()中定义一个Map集合，将我们要设置的过滤器装入，并传入方法setFilterChainDefinitionMap()中</p> <pre><code class="prism language-java"><span class="token comment">//3、装配realm实例到spring容器中 ShiroFilterFactoryBean,这个实例要关联我们装配到spring容器中的DefaultWebSecurityManager实例，所以它最后写</span> <span class="token annotation punctuation">@Bean</span> <span class="token keyword">public</span> ShiroFilterFactoryBean <span class="token function">shiroFilterFactoryBean</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"securityManager"</span><span class="token punctuation">)</span> DefaultWebSecurityManager securityManager<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>     ShiroFilterFactoryBean bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShiroFilterFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//设置安全管理器</span>     bean<span class="token punctuation">.</span><span class="token function">setSecurityManager</span><span class="token punctuation">(</span>securityManager<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">/*     * - anon：无需认证即可访问     * - authc：必须认证才能访问     * - user：必须有"记住我"功能才能访问【几乎不用】     * - perms：拥有对某个资源的访问权限才能访问【比如某系资源只有管理员可以访问】     * - role：拥有某个角色才能访问     * */</span>     Map<span class="token generics function"><span class="token punctuation">&lt;</span>String<span class="token punctuation">,</span> String<span class="token punctuation">&gt;</span></span> filterMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token generics function"><span class="token punctuation">&lt;</span>String<span class="token punctuation">,</span> String<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     filterMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/user/add"</span><span class="token punctuation">,</span><span class="token string">"authc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     filterMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/user/update"</span><span class="token punctuation">,</span><span class="token string">"authc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//配置过滤器</span>     bean<span class="token punctuation">.</span><span class="token function">setFilterChainDefinitionMap</span><span class="token punctuation">(</span>filterMap<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> bean<span class="token punctuation">;</span> <span class="token punctuation">}</span> </code></pre> </li> <li> <p>可以发现我们做的事情很简单</p> <ul> <li>定义一个map</li> <li>向map中存值，其中key为需要拦截的请求，value为放行的条件，需要条件什么请求的拦截直接put进去即可</li> <li>将map集合作为参数传入setFilterChainDefinitionMap()</li> </ul> </li> <li> <p>测试<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230112/5f694e2c10a2d27364ccd3a6698d12e9.jpg" alt="SpringBoot(39) —— Shiro实现登陆拦截"><br /><img decoding="async" src="http://img.555519.xyz/uploads/20230112/7cdc2f4dd91333315a0a23e0f3a690e2.jpg" alt="SpringBoot(39) —— Shiro实现登陆拦截"><br /> 但是只有第一次点击链接的时候会传递sessionid，后面直接重定向到login.jsp<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230112/22b02528ab6f4376d28ca8ed709ecb7f.jpg" alt="SpringBoot(39) —— Shiro实现登陆拦截"><br /><img decoding="async" src="http://img.555519.xyz/uploads/20230112/1c776a21f3aca231813f931c6384a500.jpg" alt="SpringBoot(39) —— Shiro实现登陆拦截"></p> </li> <li> <p>由于shiro没有自带一个登陆页面可以给我们测试，所以我们需要自己写一个登陆页面</p> <pre><code class="prism language-html"><span class="token doctype">&lt;!DOCTYPE html&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>登陆<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>密<span class="token entity" title="&nbsp;">&amp;nbsp;</span>码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span> </code></pre> </li> <li> <p>为这个登陆页写上controller视图跳转方法</p> <pre><code class="prism language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"toLogin"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> String <span class="token function">loginPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>     <span class="token keyword">return</span> <span class="token string">"login"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> </code></pre> </li> <li> <p>设置拦截未登录的用户之后自动跳转登录页，刚刚确实是自动跳转了login.jsp，但是我们现在不使用jsp了，所以我们需要指定自动跳转我们刚刚创建的登陆页面；直接在我们创建的ShiroConfig中的shiroFilterFactoryBean()中添加一条ShiroFilterFactoryBean对象的配置</p> <pre><code class="prism language-java"> ShiroFilterFactoryBean bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShiroFilterFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//设置安全管理器</span>  bean<span class="token punctuation">.</span><span class="token function">setSecurityManager</span><span class="token punctuation">(</span>securityManager<span class="token punctuation">)</span><span class="token punctuation">;</span>  bean<span class="token punctuation">.</span><span class="token function">setLoginUrl</span><span class="token punctuation">(</span><span class="token string">"/toLogin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre> </li> </ul> <p><img decoding="async" src="http://img.555519.xyz/uploads/20230112/d5813072a0e516bc632e952b74c3a1f1.jpg" alt="SpringBoot(39) —— Shiro实现登陆拦截"></p> <hr/> <h2><a id="_100" rel="nofollow"></a></h2> <ul> <li>注意：上面只是实现了登陆拦截，form表单的提交地址还没有填写，在写一篇博客中实现</li> <li>再来就是为什么我们没有创建登陆页面的时候，被拦截之后会被重定向到"/login.jsp"呢？看ShiroFilterFactoryBean源码即可了解</li> <li>这个类有一个方法叫applyLoginUrlIfNecessary()，源码如下 <pre><code class="prism language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">applyLoginUrlIfNecessary</span><span class="token punctuation">(</span>Filter filter<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>     String loginUrl <span class="token operator">=</span> <span class="token function">getLoginUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>loginUrl<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>filter <span class="token keyword">instanceof</span> <span class="token class-name">AccessControlFilter</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         AccessControlFilter acFilter <span class="token operator">=</span> <span class="token punctuation">(</span>AccessControlFilter<span class="token punctuation">)</span> filter<span class="token punctuation">;</span>         <span class="token comment">//only apply the login url if they haven't explicitly configured one already:</span>         <span class="token comment">//仅在尚未显式配置登录url的情况下应用登录url</span>         String existingLoginUrl <span class="token operator">=</span> acFilter<span class="token punctuation">.</span><span class="token function">getLoginUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>AccessControlFilter<span class="token punctuation">.</span>DEFAULT_LOGIN_URL<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>existingLoginUrl<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>             acFilter<span class="token punctuation">.</span><span class="token function">setLoginUrl</span><span class="token punctuation">(</span>loginUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> </li> <li>从设置方法我们可以发现，当我们没有显式的配置一个登陆页面的url的时候，它就会将登陆页面的url默认的设置为AccessControlFilter.DEFAULT_LOGIN_URL，我们可以去看看这个常量的值 <pre><code class="prism language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEFAULT_LOGIN_URL <span class="token operator">=</span> <span class="token string">"/login.jsp"</span><span class="token punctuation">;</span> </code></pre> </li> <li>可见，默认设置的登陆页面URL就是"/login.jsp"，所以我们没有显式的配置登陆页面的url的时候会被重定向到"/login.jsp"</li> </ul> </div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-38477.htm">Spring Cloud Gateway系列 配置Gateway详解</a></p>
                                        <p>下一个：<a href="/news/article-38981.htm">go web 处理文件上传</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2024-11-20-today-clash-meta-node.htm" title="11月20日 | Clash Meta每天更新19.3M/S免费节点订阅链接">11月20日 | Clash Meta每天更新19.3M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-27-clash-meta-node.htm" title="11月27日 | Clash Meta每天更新22.7M/S免费节点订阅链接">11月27日 | Clash Meta每天更新22.7M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-8-today-clash-meta-node.htm" title="10月8日 | Clash Meta每天更新21.6M/S免费节点订阅链接">10月8日 | Clash Meta每天更新21.6M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-15-node-share-links.htm" title="10月15日 | Clash Meta每天更新18.2M/S免费节点订阅链接">10月15日 | Clash Meta每天更新18.2M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-4-clash-meta-node-github.htm" title="11月4日 | Clash Meta每天更新19.3M/S免费节点订阅链接">11月4日 | Clash Meta每天更新19.3M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-25633.htm" title="仅用四步就整合好SpringSecurity+JWT实现登录认证！">仅用四步就整合好SpringSecurity+JWT实现登录认证！</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-10-node-share.htm" title="10月10日 | Clash Meta每天更新20.6M/S免费节点订阅链接">10月10日 | Clash Meta每天更新20.6M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-36515.htm" title="天津宠物猫领养中心地址在哪里（天津宠物猫领养中心地址在哪里呀）">天津宠物猫领养中心地址在哪里（天津宠物猫领养中心地址在哪里呀）</a></li>
                        <li class="py-2"><a href="/news/article-24713.htm" title="米乐动物医院怎么样啊知乎（米乐医疗科技有限公司）">米乐动物医院怎么样啊知乎（米乐医疗科技有限公司）</a></li>
                        <li class="py-2"><a href="/news/article-32695.htm" title="和田宠物医院污水处理方案 和田宠物医院污水处理方案公示">和田宠物医院污水处理方案 和田宠物医院污水处理方案公示</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">39</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">34</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">25</span> <a href="/date/2024-10/" title="2024-10 归档">2024-10</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </div>
    </section>
        <!-- footer -->
    <section class="w3l-footer-29-main">
        <!-- copyright -->
        <section class="w3l-copyright text-center">
            <div class="container">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                <p class="copy-footer-29">
                Clash Meta免费节点订阅站 版权所有 Powered by WordPress
                </p>
            </div>
            <!-- move top -->
            <button onclick="topFunction()" id="movetop" title="Go to top">
                &#10548;
            </button>
            <script>
            // When the user scrolls down 20px from the top of the document, show the button
            window.onscroll = function() {
                scrollFunction()
            };

            function scrollFunction() {
                if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                    document.getElementById("movetop").style.display = "block";
                } else {
                    document.getElementById("movetop").style.display = "none";
                }
            }

            // When the user clicks on the button, scroll to the top of the document
            function topFunction() {
                document.body.scrollTop = 0;
                document.documentElement.scrollTop = 0;
            }
            </script>
            <!-- /move top -->
        </section>
        <!-- //copyright -->
    </section>
    <!-- //footer -->
    <!-- all js scripts and files here -->
    <script src="/assets/website/js/frontend/clash_meta/theme-change.js"></script><!-- theme switch js (light and dark)-->
    <script src="/assets/website/js/frontend/clash_meta/jquery-3.5.1.min.js"></script><!-- default jQuery -->
    <script src="/assets/website/js/frontend/clash_meta/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- bootstrap js -->
    <script src="/assets/website/js/frontend/clash_meta/bootstrap.min.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>