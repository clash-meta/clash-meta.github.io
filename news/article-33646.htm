<!doctype html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://clash-meta.github.io/news/article-33646.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>拓扑排序小结_在线工具</title>
        <meta name="description" content="首先来理解什么是拓扑排序；拓扑排序简单说是做事情的先后顺序，在现实生活中,人们经常要做连串事情，这些事情之闻有顺序关系或者依赖关系，在做一件事情之前必须先做另一件事，比如安排客人的座位、穿衣服的先后、" />
        <link rel="icon" href="/assets/website/img/clash_meta/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Clash Meta免费节点订阅站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://clash-meta.github.io/news/article-33646.htm" />
    <meta property="og:site_name" content="Clash Meta免费节点订阅站" />
    <meta property="og:title" content="拓扑排序小结_在线工具" />
    <meta property="og:image" content="https://clash-meta.github.io/uploads/20240803-1/4dc624c83449cb9946f320d22d59a4a1.webp" />
        <meta property="og:release_date" content="2024-12-31T05:56:05" />
    <meta property="og:updated_time" content="2024-12-31T05:56:05" />
        <meta property="og:description" content="首先来理解什么是拓扑排序；拓扑排序简单说是做事情的先后顺序，在现实生活中,人们经常要做连串事情，这些事情之闻有顺序关系或者依赖关系，在做一件事情之前必须先做另一件事，比如安排客人的座位、穿衣服的先后、" />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="拓扑排序小结_在线工具">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">

    <link href="//fonts.googleapis.com/css2?family=Jost:wght@300;400;500&display=swap" rel="stylesheet">
    <link href="//fonts.googleapis.com/css2?family=Open+Sans:wght@400;600&display=swap" rel="stylesheet">
    <!-- Template CSS -->
    <link rel="stylesheet" href="/assets/website/css/clash_meta/style-starter.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-SJF0YS0LDW"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-SJF0YS0LDW');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <!--header-->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke px-0 pt-lg-0">
                                <a class="navbar-brand" href="/">
                    Clash Meta
                </a>
                                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav mx-lg-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/free-nodes/">免费节点</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/news/">新闻资讯</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="mobile-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!--/header-->
    <!-- about breadcrumb -->
    <section class="w3l-about-breadcrumb">
        <div class="breadcrumb-bg breadcrumb-bg-about py-5">
            <div class="container pt-lg-5 pt-md-3 p-lg-4 pb-md-3 my-lg-5">
                <h1 class="title pt-5">拓扑排序小结_在线工具</h1>
                <ul class="breadcrumbs-custom-path mt-3 text-center">
                    <li><a href="/">首页</a></li>
                    <li><a href="/news/"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 新闻资讯</a></li>
                    <li class="active"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 正文</li>
                </ul>
            </div>
        </div>
    </section>
    <!-- //about breadcrumb -->
    <section class="w3l-homeblock1">
        <div class="midd-w3 py-5">
            <div class="container py-lg-5 py-md-4 py-2">
                <div class="row">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<p>首先来理解什么是拓扑排序；拓扑排序简单说是做事情的先后顺序，在现实生活中,人们经常要做连串事情，这些事情之闻有顺序关系或者依赖关系，在做一件事情之前必须先做另一件事，比如安排客人的座位、穿衣服的先后、课程学习的先后等。这些事情都可以抽象为图论中的拓扑排序。</p> <p>拓扑排序的概念：<br />设有a、b、c、d等事情,其中a有最高优先级,b、c优先级相同,d是最低优先级，表示为a→(b,c)→d,那么abcd或acbd都是可行的排序。把事情看成图的点，把先后关系看成有向边，问题转化为在图中求一个有先后关系的排序这就是拓扑排序，显然，一个图能进行拓扑排序的完要条件是它是一个有向无环图(DAG)。有环图不能进行拓扑排序，</p> <p>当然，这里还要普及两个图的简单概念：</p> <p>出度：从一个点为起点的出去的边的数量为出度；</p> <p>入度：以一个点为终点出去的边的数量为出度。</p> <p>从入度和长度的概念上可以看出，如果一个点的入度数量为0，那这个点必定是最前面的点，如果出度等于0，则这个点必定又是最后面的点；</p> <p>同时，拓扑排序是基于bfs和dfs的思想实现的，我们就来普及一下对于bfs与dfs拓扑排序的实现方式；</p> <p>1.bfs：</p> <p>bfs拓扑排序是常用的拓扑排序算法，这个算法是基于队列来实现的</p> <p>而实现的思想，则是基于无前驱的顶点优先和无后继的顶点优先</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220501/9b1125c0097f03889e710ce7da489e8c.jpg" alt="拓扑排序小结_在线工具"></p> <p>1.无前驱的顶点优先：</p> <p>以此图为例，</p> <p>实现的步骤主要是：</p> <p>（1）先找图中入度为0的点，作为起点放进队列，当然，这些点的先后顺序是无所谓的，主要是得有，如果找完一圈都没有发现图纸有度为0的点，那这个图就不是DAG图，不存在拓扑排序；</p> <p>（2）在找完图中入度为0的节点之后，我们弹出队首元素，并且将队首元素的邻居的度都减一，把度减为0的邻居放进队列</p> <p>（3）重复以上步骤，直到队列为空；</p> <p>拿上图来说，会输出acbd，这就是上图的拓扑序列；</p> <p>当然，如果队列空了，但是依旧是还有别的点没有进入队列，那这个图就不DAG，也就不存在脱坡序列；</p> <p>2.无后继顶点优先：</p> <p>将无前驱节点优先的执行反过来就是无后继顶点优先的执行。</p> <p>2.基于dfs的拓扑排序</p> <p>dfs是天然的拓扑排序思想的体现，dfs的原理就是一条路走到黑，一直搜素到最后，然后逐层回退，正是点与点的先后关系。</p> <p>一个DAG，如果只有一个点是0入度的，从这个点开始拓扑排序，返回的顺序是逆序的拓扑排序，</p> <p>因为递归返回的是最后的点，这里就没有后继点了，逐层回退，最后到起点</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220501/851a7aa1f0b199f49fd3d7eb07a61ee7.jpg" alt="拓扑排序小结_在线工具"></p> <p> </p> <p> 为了得到正序的拓扑序列，数据结构中有一个专门对付逆序的线性结构---那就是栈，用栈记录拓扑序列在输出就可以得到正确的拓扑序列；</p> <p>但是依旧是有一些细节问题：</p> <p>(1)应该以入度为0的点为起点开始DFS.如何找到它?需要找到它吗?如果有多个入度为0的点呢?<br />这几个问题其实并不用特别处理。想象有一个虚拟的点 v,，它单向连接到所有其他点。这个点就是图中唯一 的0入度点，图中所有其他的点都是它的下一层递归，而且它不会把原图变成环路。从这个虚拟点开始DFS就完成了拓扑排序。但运算的时候并不需要处理这个虚拟点，只要在主程序中把每个点轮流执行一 DFS可这样做相当于显式地道归了虚点的所有下一层点，</p> <p>(2)如果图不是DAG,能判断吗?<br />图不是DAG，说明图是有环图，不存在拓扑排序。(那么在递归的时候会出现回退边)<br />在程序中这样发现回退边:记录每个点的状态,如果dfs递归到某个点时发现它仍在前面的递归中没有处理完毕，说明存在回退边，不存在拓扑排序:</p> <p>还要一些杂项问题：</p> <p>输出字典序最小的拓扑排序；</p> <p>这种题目比如杭电1285和北大1270都有体现；</p> <p>解决这里问题，核心是在当前步骤，在所有入度为0的点中输出编号最小的，</p> <p>这里我们不用next_permutation();</p> <p>这里采用的是优先队列：</p> <p>在bfs拓扑排序中，把普通队列改为优先队列，放进入度为0的节点，每次输出最小编号........就是重复bfs拓扑排序的步骤啦</p> <p>题目实战：https://www.dotcpp.com/oj/problem1707.html</p> <p>这道题前面我已发博客：https://www.cnblogs.com/LQS-blog/p/16207985.html</p> <p>来个重量级的:</p> <p>https://www.acwing.com/problem/content/description/166/</p> <p>友情提示，这道题不太好做，慎入；</p> <p>这里只给出代码，今天很晚了，以后找时间专门出篇博客：</p> <p> </p> <p> </p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 128, 128, 1)"> 1</span> #include&lt;bits/stdc++.h&gt; <span style="color: rgba(0, 128, 128, 1)"> 2</span> <span style="color: rgba(0, 0, 255, 1)">using</span> <span style="color: rgba(0, 0, 255, 1)">namespace</span><span style="color: rgba(0, 0, 0, 1)"> std; </span><span style="color: rgba(0, 128, 128, 1)"> 3</span> <span style="color: rgba(0, 0, 255, 1)">const</span> <span style="color: rgba(0, 0, 255, 1)">int</span> num=<span style="color: rgba(128, 0, 128, 1)">30010</span><span style="color: rgba(0, 0, 0, 1)">;  </span><span style="color: rgba(0, 128, 128, 1)"> 4</span> queue&lt;<span style="color: rgba(0, 0, 255, 1)">int</span>&gt;<span style="color: rgba(0, 0, 0, 1)">q; </span><span style="color: rgba(0, 128, 128, 1)"> 5</span> <span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> n,m; </span><span style="color: rgba(0, 128, 128, 1)"> 6</span> vector&lt;<span style="color: rgba(0, 0, 255, 1)">int</span>&gt;edge[num];<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">存图</span> <span style="color: rgba(0, 128, 128, 1)"> 7</span> vector&lt;<span style="color: rgba(0, 0, 255, 1)">int</span>&gt;topo;<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">拓扑序列</span> <span style="color: rgba(0, 128, 128, 1)"> 8</span> <span style="color: rgba(0, 0, 255, 1)">int</span> <span style="color: rgba(0, 0, 255, 1)">in</span>[num];<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">入度数组</span> <span style="color: rgba(0, 128, 128, 1)"> 9</span> bitset&lt;num&gt;f[num];<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">是标准库中的一个固定大小序列，其储存的数据只包含 0/1</span> <span style="color: rgba(0, 128, 128, 1)">10</span> <span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> main() </span><span style="color: rgba(0, 128, 128, 1)">11</span> <span style="color: rgba(0, 0, 0, 1)">{ </span><span style="color: rgba(0, 128, 128, 1)">12</span>     std::ios::sync_with_stdio(<span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">); </span><span style="color: rgba(0, 128, 128, 1)">13</span>     cin&gt;&gt;n&gt;&gt;<span style="color: rgba(0, 0, 0, 1)">m; </span><span style="color: rgba(0, 128, 128, 1)">14</span>     <span style="color: rgba(0, 0, 255, 1)">for</span>(register <span style="color: rgba(0, 0, 255, 1)">int</span> i=<span style="color: rgba(128, 0, 128, 1)">0</span>;i&lt;m;i++)<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">常规存图入度操作</span> <span style="color: rgba(0, 128, 128, 1)">15</span> <span style="color: rgba(0, 0, 0, 1)">    { </span><span style="color: rgba(0, 128, 128, 1)">16</span>         <span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> a,b; </span><span style="color: rgba(0, 128, 128, 1)">17</span>         cin&gt;&gt;a&gt;&gt;<span style="color: rgba(0, 0, 0, 1)">b; </span><span style="color: rgba(0, 128, 128, 1)">18</span> <span style="color: rgba(0, 0, 0, 1)">        edge[a].push_back(b); </span><span style="color: rgba(0, 128, 128, 1)">19</span>         <span style="color: rgba(0, 0, 255, 1)">in</span>[b]++<span style="color: rgba(0, 0, 0, 1)">; </span><span style="color: rgba(0, 128, 128, 1)">20</span> <span style="color: rgba(0, 0, 0, 1)">    } </span><span style="color: rgba(0, 128, 128, 1)">21</span>     <span style="color: rgba(0, 0, 255, 1)">for</span>(register <span style="color: rgba(0, 0, 255, 1)">int</span> i=<span style="color: rgba(128, 0, 128, 1)">0</span>;i&lt;n;i++)<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">把入度为0的点入队</span> <span style="color: rgba(0, 128, 128, 1)">22</span> <span style="color: rgba(0, 0, 0, 1)">    { </span><span style="color: rgba(0, 128, 128, 1)">23</span>         <span style="color: rgba(0, 0, 255, 1)">if</span>(!<span style="color: rgba(0, 0, 255, 1)">in</span><span style="color: rgba(0, 0, 0, 1)">[i]) </span><span style="color: rgba(0, 128, 128, 1)">24</span> <span style="color: rgba(0, 0, 0, 1)">        q.push(i); </span><span style="color: rgba(0, 128, 128, 1)">25</span> <span style="color: rgba(0, 0, 0, 1)">    } </span><span style="color: rgba(0, 128, 128, 1)">26</span>     <span style="color: rgba(0, 0, 255, 1)">while</span>(!<span style="color: rgba(0, 0, 0, 1)">q.empty()) </span><span style="color: rgba(0, 128, 128, 1)">27</span> <span style="color: rgba(0, 0, 0, 1)">    { </span><span style="color: rgba(0, 128, 128, 1)">28</span>         <span style="color: rgba(0, 0, 255, 1)">int</span> x=q.front();<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">取队首</span> <span style="color: rgba(0, 128, 128, 1)">29</span> <span style="color: rgba(0, 0, 0, 1)">        q.pop(); </span><span style="color: rgba(0, 128, 128, 1)">30</span>         topo.push_back(x);<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">存入拓扑序列</span> <span style="color: rgba(0, 128, 128, 1)">31</span>         <span style="color: rgba(0, 0, 255, 1)">for</span>(register <span style="color: rgba(0, 0, 255, 1)">int</span> j=<span style="color: rgba(128, 0, 128, 1)">0</span>;j&lt;edge[x].size();j++)<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">找邻居</span> <span style="color: rgba(0, 128, 128, 1)">32</span> <span style="color: rgba(0, 0, 0, 1)">        { </span><span style="color: rgba(0, 128, 128, 1)">33</span>             <span style="color: rgba(0, 0, 255, 1)">int</span> y=<span style="color: rgba(0, 0, 0, 1)">edge[x][j]; </span><span style="color: rgba(0, 128, 128, 1)">34</span>             <span style="color: rgba(0, 0, 255, 1)">in</span>[y]--;<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">度减1</span> <span style="color: rgba(0, 128, 128, 1)">35</span>             <span style="color: rgba(0, 0, 255, 1)">if</span>(!<span style="color: rgba(0, 0, 255, 1)">in</span>[y])<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">找邻居度为0的节点</span> <span style="color: rgba(0, 128, 128, 1)">36</span> <span style="color: rgba(0, 0, 0, 1)">            q.push(y);  </span><span style="color: rgba(0, 128, 128, 1)">37</span> <span style="color: rgba(0, 0, 0, 1)">        } </span><span style="color: rgba(0, 128, 128, 1)">38</span> <span style="color: rgba(0, 0, 0, 1)">    } </span><span style="color: rgba(0, 128, 128, 1)">39</span>     <span style="color: rgba(0, 0, 255, 1)">for</span>(register <span style="color: rgba(0, 0, 255, 1)">int</span> i=topo.size()-<span style="color: rgba(128, 0, 128, 1)">1</span>;i&gt;=<span style="color: rgba(128, 0, 128, 1)">0</span>;i--<span style="color: rgba(0, 0, 0, 1)">) </span><span style="color: rgba(0, 128, 128, 1)">40</span> <span style="color: rgba(0, 0, 0, 1)">    { </span><span style="color: rgba(0, 128, 128, 1)">41</span>         <span style="color: rgba(0, 0, 255, 1)">int</span> x=<span style="color: rgba(0, 0, 0, 1)">topo[i]; </span><span style="color: rgba(0, 128, 128, 1)">42</span>         f[x].reset();<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">置所以位为0</span> <span style="color: rgba(0, 128, 128, 1)">43</span>         f[x][x]=<span style="color: rgba(128, 0, 128, 1)">1</span>; <span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> x这个点可以到达自己   f[x][x] =表示从 x出发的点，</span> <span style="color: rgba(0, 128, 128, 1)">44</span>         <span style="color: rgba(0, 0, 255, 1)">for</span>(register <span style="color: rgba(0, 0, 255, 1)">int</span> k=<span style="color: rgba(128, 0, 128, 1)">0</span>;k&lt;edge[x].size();k++<span style="color: rgba(0, 0, 0, 1)">) </span><span style="color: rgba(0, 128, 128, 1)">45</span> <span style="color: rgba(0, 0, 0, 1)">        { </span><span style="color: rgba(0, 128, 128, 1)">46</span>             f[x]|=f[edge[x][k]];<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">x这个点可以到达的点的数量= {x} U {y1} U {y2}..{yn}</span> <span style="color: rgba(0, 128, 128, 1)">47</span> <span style="color: rgba(0, 0, 0, 1)">        } </span><span style="color: rgba(0, 128, 128, 1)">48</span> <span style="color: rgba(0, 0, 0, 1)">    } </span><span style="color: rgba(0, 128, 128, 1)">49</span>     <span style="color: rgba(0, 0, 255, 1)">for</span>(register <span style="color: rgba(0, 0, 255, 1)">int</span> i=<span style="color: rgba(128, 0, 128, 1)">1</span>;i&lt;=n;i++<span style="color: rgba(0, 0, 0, 1)">) </span><span style="color: rgba(0, 128, 128, 1)">50</span>     cout&lt;&lt;f[i].count()&lt;&lt;endl;<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> f[i].count() 返回f[i] 中 1的个数</span> <span style="color: rgba(0, 128, 128, 1)">51</span>     <span style="color: rgba(0, 0, 255, 1)">return</span> <span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">; </span><span style="color: rgba(0, 128, 128, 1)">52</span> }</pre> </div> <p> </p> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-33645.htm">C#面向抽象编程第二讲</a></p>
                                        <p>下一个：<a href="/news/article-34125.htm">JS的循环练习</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-49374.htm" title="被猫抓伤五天后在打的针有效果吗（被猫抓伤后五天才打疫苗有作用吗?）">被猫抓伤五天后在打的针有效果吗（被猫抓伤后五天才打疫苗有作用吗?）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-18-clash-meta-node.htm" title="11月18日 | Clash Meta每天更新18.2M/S免费节点订阅链接">11月18日 | Clash Meta每天更新18.2M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-41951.htm" title="动物疫苗行业排名榜最新 动物疫苗行业排名榜最新">动物疫苗行业排名榜最新 动物疫苗行业排名榜最新</a></li>
                        <li class="py-2"><a href="/news/article-31764.htm" title="宠物领养协议书范本图片大全下载 宠物领养协议书范本图片大全下载">宠物领养协议书范本图片大全下载 宠物领养协议书范本图片大全下载</a></li>
                        <li class="py-2"><a href="/news/article-39976.htm" title="免费领养宠物的app下载安卓（免费领养宠物的应用）">免费领养宠物的app下载安卓（免费领养宠物的应用）</a></li>
                        <li class="py-2"><a href="/news/article-47387.htm" title="小猫多久能知道自己的名字（猫要多久能知道自己的名字）">小猫多久能知道自己的名字（猫要多久能知道自己的名字）</a></li>
                        <li class="py-2"><a href="/news/article-45419.htm" title="孕妇被猫抓流血了,会影响胎儿发育吗（孕妇被猫抓流血了,会影响胎儿发育吗视频）">孕妇被猫抓流血了,会影响胎儿发育吗（孕妇被猫抓流血了,会影响胎儿发育吗视频）</a></li>
                        <li class="py-2"><a href="/news/article-39456.htm" title="三国杀出将顺序（三国杀 出牌阶段）">三国杀出将顺序（三国杀 出牌阶段）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-8-clash-meta-github.htm" title="1月8日 | Clash Meta每天更新18.2M/S免费节点订阅链接地址">1月8日 | Clash Meta每天更新18.2M/S免费节点订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-26-free-high-speed-nodes.htm" title="12月26日 | Clash Meta每天更新22.9M/S免费节点订阅链接地址">12月26日 | Clash Meta每天更新22.9M/S免费节点订阅链接地址</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">6</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </div>
    </section>
        <!-- footer -->
    <section class="w3l-footer-29-main">
        <!-- copyright -->
        <section class="w3l-copyright text-center">
            <div class="container">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                <p class="copy-footer-29">
                Clash Meta免费节点订阅站 版权所有 Powered by WordPress
                </p>
            </div>
            <!-- move top -->
            <button onclick="topFunction()" id="movetop" title="Go to top">
                &#10548;
            </button>
            <script>
            // When the user scrolls down 20px from the top of the document, show the button
            window.onscroll = function() {
                scrollFunction()
            };

            function scrollFunction() {
                if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                    document.getElementById("movetop").style.display = "block";
                } else {
                    document.getElementById("movetop").style.display = "none";
                }
            }

            // When the user clicks on the button, scroll to the top of the document
            function topFunction() {
                document.body.scrollTop = 0;
                document.documentElement.scrollTop = 0;
            }
            </script>
            <!-- /move top -->
        </section>
        <!-- //copyright -->
    </section>
    <!-- //footer -->
    <!-- all js scripts and files here -->
    <script src="/assets/website/js/frontend/clash_meta/theme-change.js"></script><!-- theme switch js (light and dark)-->
    <script src="/assets/website/js/frontend/clash_meta/jquery-3.5.1.min.js"></script><!-- default jQuery -->
    <script src="/assets/website/js/frontend/clash_meta/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- bootstrap js -->
    <script src="/assets/website/js/frontend/clash_meta/bootstrap.min.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>