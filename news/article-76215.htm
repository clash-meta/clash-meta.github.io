<!doctype html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://clash-meta.github.io/news/article-76215.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>Redis持久化机制及缓存失效解决方案</title>
        <meta name="description" content="Redis集群故障监测及哨兵机制原理解析Redis海量数据存储方案Redis Cluster  在之前的文章写过redis的实用功能，包括数据结构，主从复制结构，以及应对高并发海量数据场景下的分片re" />
        <link rel="icon" href="/assets/website/img/clash_meta/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Clash Meta免费节点订阅站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://clash-meta.github.io/news/article-76215.htm" />
    <meta property="og:site_name" content="Clash Meta免费节点订阅站" />
    <meta property="og:title" content="Redis持久化机制及缓存失效解决方案" />
    <meta property="og:image" content="https://clash-meta.github.io/uploads/20240803-1/e1d857b9f9b9d9ac24475dec53749f34.webp" />
        <meta property="og:release_date" content="2025-03-18T06:12:23" />
    <meta property="og:updated_time" content="2025-03-18T06:12:23" />
        <meta property="og:description" content="Redis集群故障监测及哨兵机制原理解析Redis海量数据存储方案Redis Cluster  在之前的文章写过redis的实用功能，包括数据结构，主从复制结构，以及应对高并发海量数据场景下的分片re" />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="Redis持久化机制及缓存失效解决方案">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">

    <link href="//fonts.googleapis.com/css2?family=Jost:wght@300;400;500&display=swap" rel="stylesheet">
    <link href="//fonts.googleapis.com/css2?family=Open+Sans:wght@400;600&display=swap" rel="stylesheet">
    <!-- Template CSS -->
    <link rel="stylesheet" href="/assets/website/css/clash_meta/style-starter.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-SJF0YS0LDW"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-SJF0YS0LDW');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <!--header-->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke px-0 pt-lg-0">
                                <a class="navbar-brand" href="/">
                    Clash Meta                </a>
                                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav mx-lg-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/free-nodes/">免费节点</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/client.htm">客户端</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/news/">新闻资讯</a>
                        </li>
                                            </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="mobile-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!--/header-->
    <!-- about breadcrumb -->
    <section class="w3l-about-breadcrumb">
        <div class="breadcrumb-bg breadcrumb-bg-about py-5">
            <div class="container pt-lg-5 pt-md-3 p-lg-4 pb-md-3 my-lg-5">
                <h1 class="title pt-5">Redis持久化机制及缓存失效解决方案</h1>
                <ul class="breadcrumbs-custom-path mt-3 text-center">
                    <li><a href="/">首页</a></li>
                    <li><a href="/news/"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 新闻资讯</a></li>
                    <li class="active"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 正文</li>
                </ul>
            </div>
        </div>
    </section>
    <!-- //about breadcrumb -->
    <section class="w3l-homeblock1">
        <div class="midd-w3 py-5">
            <div class="container py-lg-5 py-md-4 py-2">
                <div class="row">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="htmledit_views"> <p><a class="link-info" href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/qq_33373609/article/details/120667091?spm=1001.2014.3001.5501"  title="Redis集群故障监测及哨兵机制原理解析" rel="nofollow">Redis集群故障监测及哨兵机制原理解析</a><br /><a class="link-info" href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/qq_33373609/article/details/120720991?spm=1001.2014.3001.5501"  title="Redis海量数据存储方案Redis Cluster" rel="nofollow">Redis海量数据存储方案Redis Cluster</a></p> </h1> <p>在之前的文章写过redis的实用功能，包括数据结构，主从复制结构，以及应对高并发海量数据场景下的分片redis cluster 集群；本篇文章继续学习redis框架应对缓存失效，以及持久化机制及内存管理出现的问题，以及提供的解决方案及思想。</p> </h1> <p>在redis中缓存失效的原因主要是重启导致数据失效， 解决方案 RDB、AOF持久化机制。以及aof中为什么能保证数据在断电或重启不失效的原因，提供不同的fsync策略：完全没有fsync，每秒fsync，每个查询fsync。使用默认策略fsync时，每秒的写入性能仍然很好（fsync是使用后台线程执行的，并且在没有进行fsync的情况下，主线程将尽力执行写入操作。）保证数据不失效；缓存中常见的内存淘汰与过期管理机制，保证数据更新；以及缓存雪崩分析及解决方案，在redis中利用ehcache 缓存降级，或者Redis备份和快速预热 等都可以避免 缓存出现缓存雪崩问题。</p> </h1> <div><span style="color:#4b4b4b;">Redis的数据都存放在内存中，如果没有配置持久化，redis重启后数据就全丢失了，于是需要开</span></div> <div><span style="color:#4b4b4b;">启redis的持久化功能，将数据保存到磁盘上，当redis重启后，可以从磁盘中恢复数据。用来做数据的持久存储，保证数据不丢失。</span><img fetchpriority="high" decoding="async" alt="" height="210" src="http://img.555519.xyz/uploads3/20220903/b96248850f6c48e9a9c3fa612dbcb5c1.jpg"></div> <h2>&nbsp;持久化的方式</h2> <p>redis中既有RDB持久化，也有AOF持久化，两者是可以并存的。对于数据要求非常高的情况下，官方是推荐使用AOF，在配置文件中使用 redis.conf中对应的开启方式</p> <p><img decoding="async" alt="" height="358" src="http://img.555519.xyz/uploads3/20220903/8aa072989ed89bb1df95f6e0fd4200bc.jpg"></p> <p>在磁盘中对应的文件名为appendonly.aof</p> <p>对应rdb与aof的持久化配置策略</p> <p><img decoding="async" alt="" height="194" src="http://img.555519.xyz/uploads3/20220903/7ce1213e01622b8666551ee71ec878c8.jpg"></p> <h3><span style="color:#3373b1;">RDB 持久化</span></h3> <p><span style="color:#000000;">RDB 持久化方式能够在指定的时间间隔对你的数据进行快照存储</span></p> <p><img loading="lazy" decoding="async" alt="" height="267" src="http://img.555519.xyz/uploads3/20220903/c4c7f2227d3351e515d103a9fdc78c5b.jpg"></p> <p><span style="color:#000000;">Redis客户端直接通过命令BGSAVE或者SAVE来创建一个内存快照</span></p> <ul> <li><span style="color:#000000;">BGSAVE 调用fork来创建一个子进程，子进程负责将快照写入磁盘，而父进程仍然继续处理命令。</span></li> <li> <div><span style="color:#000000;">SAVE 执行SAVE命令过程中，不再响应其他命令。</span></div> </li> </ul> <div></div> <div><span style="color:#000000;">在redis.conf中调整save配置选项，当在规定的时间内，Redis发生了写操作的个数满足条件会触发发生</span></div> <div><span style="color:#000000;">BGSAVE命令</span></div> <div> <div> <pre><code># 900秒之内至少一次写操作 save 900 1  # 300秒之内至少发生10次写操作 save 300 10 # 60秒之内发生至少10000次 save 60 10000</code></pre> </div> <p><strong>优点</strong></p> <div><span style="color:#000000;">对性能影响最小&nbsp;RDB文件进行数据恢复比使用AOF要快很多</span></div> <div></div> <div></div> </div> <div><strong>缺点</strong></div> <div></div> <div> <div><span style="color:#000000;">同步时丢失数据</span></div> <div> <div><span style="color:#000000;">如果数据集非常大且CPU不够强（比如单核 CPU），Redis在fork子进程时可能会消耗相</span></div> <div><span style="color:#000000;">对较长的时间，影响Redis对外提供服务的能力。</span></div> </div> </div> <h3><span style="color:#3373b1;">AOF（append only file）持久化</span></h3> <div><span style="color:#000000;">AOF 持久化方式记录每次对服务器写的操作，当服务器重启的时候会重新</span></div> <div><span style="color:#000000;">执行这些命令来恢复原始的数据</span></div> <div><img loading="lazy" decoding="async" alt="" height="294" src="http://img.555519.xyz/uploads3/20220903/25984cb1c0ada3ef6d7e9b832560cd59.jpg"></div> <div><span style="color:#000000;"><strong>记录每次服务受到的写</strong></span></div> <div></div> <div> <div><span style="color:#000000;">BGREWRITEAOF命令可以触发日志重写或自动重写，废除对同一个Key历史的无用命令，重建当前数据集所需的最短命令序列。</span></div> <div><span style="color:#000000;">意外中断，如果最后的命令只写了一部分，恢复时则会跳过它，执行后面完整的命令。</span></div> <div></div> <div> <div><strong><span style="color:#000000;">开启AOF持久化</span></strong></div> <div></div> <div> <pre><code>appendonly yes</code></pre> <div><strong><span style="color:#000000;">AOF策略调整</span></strong></div> </div> <div></div> <div> <pre><code>#每次有数据修改发生时都会写入AOF文件，非常安全非常慢 appendfsync always #每秒钟同步一次，该策略为AOF的缺省策略，够快可能会丢失1秒的数据 appendfsync everysec #不主动fsync,由操作系统决定，更快，更不安全的方法 appendfsync no</code></pre> <p><img loading="lazy" decoding="async" alt="" height="147" src="http://img.555519.xyz/uploads3/20220903/0a0deb2dcf30974d4f6b6ab4d6f45f61.jpg"></p> <p><strong>优点</strong></p> <div><span style="color:#000000;">最安全</span><span style="color:#000000;">容灾&nbsp;&nbsp;易读，可修改</span></div> <div></div> <div><strong>缺点</strong></div> <div><span style="color:#000000;">文件体积大</span><span style="color:#000000;">性能消耗比RDB高&nbsp;数据恢复速度比RDB慢</span></div> <div> <h2><span style="color:#0d0016;"><strong>Redis丢失数据的可能性</strong></span></h2> <div><span style="color:#000000;"><strong>持久化丢失的可能</strong></span></div> <div><span style="color:#000000;"><strong>RDB方式</strong></span></div> <div><span style="color:#000000;">快照产生的策略，天生就不保证数据安全</span></div> <div><span style="color:#000000;"><strong>AOF持久化策略</strong></span></div> <div><span style="color:#000000;">默认每秒同步一次磁盘，可能会有1秒的数据丢失</span></div> <div><span style="color:#000000;">每次修改都同步，数据安全可保证，但Redis高性能的特性全无</span></div> <div><span style="color:#000000;"><strong>主从复制丢失的可能</strong></span></div> <div><span style="color:#000000;">异步复制，存在一定的时间窗口数据丢失</span></div> <div><span style="color:#000000;">网络、服务器问题，存在一定数据的丢失</span></div> <div></div> <div><span style="color:#000000;">都会导致数据可能会丢失</span></div> <div></div> </h1> <p><strong>Redis在内存空间不足的时候，为了保证命中率，就会选择一定的数据淘汰策略，这个和我们操作系统中的页面置换算法类似。</strong></p> <h2>内存分配</h2> </div> <div><strong><span style="color:#000000;">不同数据类型的大小限制</span></strong></div> <div> <ul> <li><span style="color:#000000;">Strings类型：一个String类型的value最大可以存储512M。</span></li> <li><span style="color:#000000;">Lists类型：list的元素个数最多为2^32-1个，也就是4294967295个。</span></li> <li><span style="color:#3373b1;"></span><span style="color:#000000;">Sets类型：元素个数最多为2^32-1个，也就是4294967295个。</span></li> <li><span style="color:#3373b1;"></span><span style="color:#000000;">Hashes类型：键值对个数最多为2^32-1个，也就是4294967295个</span></li> </ul> </div> <div> <pre><code># 最大内存控制 maxmemory 最大内存阈值 maxmemory-policy 到达阈值的执行策略</code></pre> <p><img loading="lazy" decoding="async" alt="" height="391" src="http://img.555519.xyz/uploads3/20220903/f853e392cb21c35ac57b4c39d75a187d.jpg"></p> <p>&nbsp;单位是字节&nbsp; ，利于精确控制</p> <h2><strong>内存压缩</strong></h2> </div> <p>当内存达到配置量时，会做一个内存压缩 ，这些配置都是压缩优化内存手段。</p> <pre><code>#配置字段最多512个 hash-max-zipmap-entries 512  #配置value最大为64字节 hash-max-zipmap-value 64 #配置元素个数最多512个 list-max-ziplist-entries 512 #配置value最大为64字节 list-max-ziplist-value 64  #配置元素个数最多512个 set-max-intset-entries 512 #配置元素个数最多128个 zset-max-ziplist-entries 128  #配置value最大为64字节 zset-max-ziplist-value 64</code></pre> <p><span style="color:#000000;">大小超出压缩范围，溢出后Redis将自动将其转换为正常大小，减少cpu的消耗</span></p> <h2><span style="color:#0d0016;">过期数据的处理策略</span></h2> <p><strong>Reids的种淘汰策略：</strong></p> <p><span style="color:#3373b1;">主动处理（ redis 主动触发检测key是否过期）每秒执行10次。过程如下：</span></p> <div><span style="color:#000000;">1. 从具有相关过期的密钥集中测试20个随机密钥</span></div> <div><span style="color:#000000;">2. 删除找到的所有密钥已过期</span></div> <div><span style="color:#000000;">3. 如果超过25％的密钥已过期，请从步骤1重新开始</span></div> <div></div> <div></div> <div></div> <div> <div><span style="color:#3373b1;">被动处理：</span></div> <div><span style="color:#000000;">1. 每次访问key的时候，发现超时后被动过期，清理掉</span></div> </div> <div><strong><span style="color:#0d0016;">数据恢复阶段过期数据的处理策略</span></strong></div> <div></div> <div> <div><span style="color:#3373b1;">RDB方式</span></div> <div><span style="color:#000000;">过期的key不会被持久化到文件中。</span></div> <div><span style="color:#000000;">载入时过期的key，会通过redis的主动和被动方式清理掉。</span></div> <div></div> <div><span style="color:#3373b1;"></span><span style="color:#3373b1;">AOF方式</span></div> <div><span style="color:#000000;">当 redis 使用 AOF 方式持久化时，每次遇到过期的 key redis 会追</span></div> <div><span style="color:#000000;">加一条 DEL 命令 到 AOF 文件，</span></div> <div><span style="color:#000000;">也就是说只要我们顺序载入执行 AOF 命令文件就会删除过期的键。</span></div> </div> <p><strong>过期数据的计算和计算机本身的时间是有直接联系的。</strong></p> <h2><span style="color:#0d0016;"><strong>LRU算法</strong></span></h2> <div><span style="color:#000000;">LRU（Least recently used，最近最少使用）：根据数据的历史访问记录来进行淘汰数据</span></div> <div></div> <div> <ul> <li><span style="color:#000000;">核心思想：如果数据最近被访问过，那么将来被访问的几率也更高。</span></li> <li><span style="color:#000000;">注意：Redis的LRU算法并非完整的实现，完整的LRU实现是因为这需要太多的内存。</span></li> <li><span style="color:#000000;">方法：通过对少量keys进行取样(50%)，然后回收其中一个最好的key。</span></li> </ul> <div></div> <div> <pre><code>&nbsp;配置方式： maxmemory-samples 5</code></pre> <p>结构是通过链表+map来进行实现的，当淘汰也是淘汰链表尾的数据</p> <p><img loading="lazy" decoding="async" alt="" height="385" src="http://img.555519.xyz/uploads3/20220903/9d1cd51c5002675cf012d1bb577a7e1c.jpg"></p> <p>&nbsp;产生的代价就是 访问、删除都需要遍历链表</p> <p><img loading="lazy" decoding="async" alt="" height="333" src="http://img.555519.xyz/uploads3/20220903/8156a5149f9d293fda1ab1319f0cf079.jpg"></p> </div> </div> <h2><strong><span style="color:#0d0016;">LFU算法</span></strong></h2> <div><span style="color:#000000;">LFU（Least Frequently Used）根据数据的历史访问频率来淘汰数据</span></div> <div> <div><strong><span style="color:#000000;">核心思想：如果数据过去被访问多次，那么将来被访问的频率也更高。</span></strong></div> <div></div> <ul> <li><span style="color:#000000;"></span><span style="color:#000000;">Redis实现的是近似的实现，每次对key进行访问时，用基于概率的对数计数器来记录</span><span style="color:#000000;">访问次数，同时这个计数器会随着时间推移而减小。</span></li> <li><span style="color:#000000;"></span><span style="color:#000000;">Morris counter算法依据：</span><span style="color:#9454c3;">https://en.wikipedia.org/wiki/Approximate_counting_algorithm</span></li> <li><span style="color:#000000;">启用LFU算法后，可以使用热点数据分析功能。（ redis-cli --hotkeys ）</span></li> </ul> </div> <h2><span style="color:#0d0016;"><strong>Redis内存回收策略</strong></span></h2> <div><strong><span style="color:#000000;">配置文件中设置：maxmemory-policy noeviction</span></strong></div> <div><strong><span style="color:#000000;">动态调整：config set maxmemory-policy noeviction</span></strong></div> <div></div> <div><strong><span style="color:#000000;">回收的策略</span></strong></div> <div></div> <div> <pre><code>noeviction 客户端尝试执行会让更多内存被使用的命令直接报错 allkeys-lru 在所有key里执行LRU算法 volatile-lru 在所有已经过期的key里执行LRU算法 volatile-lfu 使用过期集在密钥中使用近似LFU进行驱逐 allkeys-lfu 使用近似LFU逐出任何键 allkeys-random 在所有key里随机回收 volatile-random 在已经过期的key里随机回收 volatile-ttl 回收已经过期的key，并且优先回收存活时间（TTL）较短的键</code></pre> <p><img loading="lazy" decoding="async" alt="" height="345" src="http://img.555519.xyz/uploads3/20220903/dcc5c54c6c27a4fc23c0262b2550c4ba.jpg"></p> <h2><span style="color:#0d0016;"><strong>适合缓存的数据</strong></span></h2> <p><span style="color:#000000;">三个维度评判数据是否合适缓存</span></p> <p><img loading="lazy" decoding="async" alt="" height="292" src="http://img.555519.xyz/uploads3/20220903/a136c667bb19aae6d9513dfd050b3ac4.jpg"></p> </h1> <h2><span style="color:#0d0016;"><strong>缓存穿透</strong></span></h2> <div><span style="color:#000000;">缓存失效的两种情况：</span></div> <div> <ul> <li><strong><span style="color:#000000;">高峰期大面积缓存Key失效。（所有请求全部访问后端数据库）</span></strong></li> </ul> <p>类似12306网站，因为用户频繁的查询车次信息，假设所有车次信息都建立对应的缓存，那么如果所有车次建立缓存的时间一样，失效时间也一样，那么在缓存失效的这一刻，也就意味着所有车次的缓存都失效。通常当缓存失效的时候我们需要重构缓存，这时所有的车次都将面临重构缓存，即出现问题1的场景，此时数据库就将面临大规模的访问。</p> <ul> <li><strong><span style="color:#000000;">局部高峰期，热点缓存Key失效。（导致海量的请求直击数据库） 缓存数据有效期到来的那一瞬间</span></strong></li> </ul> </div> </div> <p>春节马上快到了，抢票回家的时刻也快来临了。通常我们会事先选择好一个车次然后疯狂更新车次信息，假设此时这般车的缓存刚好失效，可以想象会有多大的请求会直怼数据库。</p> <p><img loading="lazy" decoding="async" alt="" height="471" src="http://img.555519.xyz/uploads3/20220903/a955a04b60f1f7fddefc8c851d15ef5a.jpg"></p> <p>&nbsp;这会造成数据库的压力是非常大的，有可能导致数据库连接占满，有可能会影响其他功能，大量占用数据库连接，导致其他应用访问该DB数据库时，都会等待着，查询慢的情况。这就是缓存雪崩，缓存失效。</p> <div><span style="color:#000000;">突发重要热点事件&nbsp; &nbsp;春节发红包 电商降价、抢购、促销活动</span></div> <div></div> <h2><span style="color:#0d0016;"><strong>缓存雪崩风险</strong></span></h2> <div> <div><span style="color:#000000;">缓存雪崩：因为缓存服务挂掉或者热点缓存失效，从而导致海量请求去查询数据库，</span></div> <div><span style="color:#000000;">导致数据库连接不够用或者数据库处理不过来，从而导致整个系统不可用。</span></div> <div></div> <div><img loading="lazy" decoding="async" alt="" height="335" src="http://img.555519.xyz/uploads3/20220903/3a7eb6a909453fbe2a22d612232de939.jpg"></div> <h2>&nbsp;解决方案</h2> </div> <ul> <li>在redis中设置过期时间，设置不一样的过期时间</li> <li>不需要大量的请求来恢复缓存，采用互斥锁；把数据库不存在的数据，也缓存起来，短期过滤，过滤一些不存在的key.</li> </ul> <p><img loading="lazy" decoding="async" alt="" height="471" src="http://img.555519.xyz/uploads3/20220903/9f9146765d11701cc8d73e1468a0cbd5.jpg"></p> <ul> <li>&nbsp;拿到锁的线程负责<span style="color:#ff0000;">更新缓存</span>，<span style="color:#ff0000;">其他</span>请求读取<span style="color:#ff0000;">备份</span>缓存数据或者执行<span style="color:#ff0000;">降级</span>策略； <div><span style="color:#000000;">备份缓存通常是不设置过期时间的，异步更新的缓存。</span></div> </li> <li>限流限次限频。</li> <li>服务降级&nbsp; 对应用前端请求降级</li> </ul> <p>使用锁的机制对商品进行 处理的形式</p> <pre><code>public class GoodsService2 {      private final Logger logger = LoggerFactory.getLogger(GoodsService2.class);      @Resource(name = "mainRedisTemplate")     StringRedisTemplate mainRedisTemplate;      @Autowired     DatabaseService databaseService;      Lock lock = new ReentrantLock();      /**      * 查询商品库存数      *      * @param goodsId 商品ID      * @return 商品库存数      */     // @Cacheable 不管用什么样的方式，核心步骤 1，2，3     public Object queryStock(final String goodsId) throws InterruptedException {         // 1. 先从redis缓存中获取余票信息     	String cacheKey = "goodsStock-"+goodsId;         String value = mainRedisTemplate.opsForValue().get(cacheKey);         if (value != null) {             logger.warn(Thread.currentThread().getName() + "缓存中取得数据==============&gt;" + value);             return value;         }          // 2000 请求         // 同步 一个个来         lock.lock(); // 2000 线程 1个线程拿到，1999 等待排队         try {             // 再次获取缓存             value = mainRedisTemplate.opsForValue().get(cacheKey);             if (value != null) {                 logger.warn(Thread.currentThread().getName() + "缓存中取得数据==============&gt;" + value);                 return value;             }              // 拿到锁 重建缓存             // 2. 缓存中没有,则取数据库             value = databaseService.queryFromDatabase(goodsId);             System.out.println(Thread.currentThread().getName() + "从数据库中取得数据==============&gt;" + value);              // 3. 塞到缓存,120秒过期时间             final String v = value;             mainRedisTemplate.execute((RedisCallback&lt;Boolean&gt;) connection -&gt; {                 return connection.setEx(cacheKey.getBytes(), 120, v.getBytes());             });         } finally {             lock.unlock();         }          return value;     } }</code></pre> </div> </div> </div> </div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-76214.htm">关于reshape(-1,&#8230;)与view(-1,&#8230;)这两个改变张量shape的函数</a></p>
                                        <p>下一个：<a href="/news/article-76890.htm">被猫抓伤以后多长时间打疫苗有效（被猫抓了之后多长时间打疫苗）</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-36062.htm" title="动物疫苗未冷藏几小时失效了怎么处理（动物疫苗能放冰箱吗）">动物疫苗未冷藏几小时失效了怎么处理（动物疫苗能放冰箱吗）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-13-clash-meta-windows.htm" title="2月13日 | Clash Meta每天更新18.8M/S免费节点订阅链接地址">2月13日 | Clash Meta每天更新18.8M/S免费节点订阅链接地址</a></li>
                        <li class="py-2"><a href="/news/article-51442.htm" title="猫咪体外驱虫怎么操作滴多少（猫咪体外驱虫怎么操作滴多少药水）">猫咪体外驱虫怎么操作滴多少（猫咪体外驱虫怎么操作滴多少药水）</a></li>
                        <li class="py-2"><a href="/news/article-49374.htm" title="被猫抓伤五天后在打的针有效果吗（被猫抓伤后五天才打疫苗有作用吗?）">被猫抓伤五天后在打的针有效果吗（被猫抓伤后五天才打疫苗有作用吗?）</a></li>
                        <li class="py-2"><a href="/news/article-42440.htm" title="动物医院有哪些助理岗位呢（动物医院助理工作总结）">动物医院有哪些助理岗位呢（动物医院助理工作总结）</a></li>
                        <li class="py-2"><a href="/news/article-59164.htm" title="宠物领养平台的设计与实现方***文怎么写（宠物领养系统国内外现状）">宠物领养平台的设计与实现方***文怎么写（宠物领养系统国内外现状）</a></li>
                        <li class="py-2"><a href="/news/article-36514.htm" title="SpringBoot+Vue之分页操作">SpringBoot+Vue之分页操作</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-31-clash-meta-node-share.htm" title="1月31日 | Clash Meta每天更新22.1M/S免费节点订阅链接地址">1月31日 | Clash Meta每天更新22.1M/S免费节点订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-16-clash-meta-node-share.htm" title="1月16日 | Clash Meta每天更新19.4M/S免费节点订阅链接地址">1月16日 | Clash Meta每天更新19.4M/S免费节点订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-10-clash-meta-node.htm" title="1月10日 | Clash Meta每天更新18.2M/S免费节点订阅链接地址">1月10日 | Clash Meta每天更新18.2M/S免费节点订阅链接地址</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">63</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </div>
    </section>
        <!-- footer -->
    <section class="w3l-footer-29-main">
        <!-- copyright -->
        <section class="w3l-copyright text-center">
            <div class="container">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                <p class="copy-footer-29">
                Clash Meta免费节点订阅站 版权所有 Powered by WordPress
                </p>
            </div>
            <!-- move top -->
            <button onclick="topFunction()" id="movetop" title="Go to top">
                &#10548;
            </button>
            <script>
            // When the user scrolls down 20px from the top of the document, show the button
            window.onscroll = function() {
                scrollFunction()
            };

            function scrollFunction() {
                if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                    document.getElementById("movetop").style.display = "block";
                } else {
                    document.getElementById("movetop").style.display = "none";
                }
            }

            // When the user clicks on the button, scroll to the top of the document
            function topFunction() {
                document.body.scrollTop = 0;
                document.documentElement.scrollTop = 0;
            }
            </script>
            <!-- /move top -->
        </section>
        <!-- //copyright -->
    </section>
    <!-- //footer -->
    <!-- all js scripts and files here -->
    <script src="/assets/website/js/frontend/clash_meta/theme-change.js"></script><!-- theme switch js (light and dark)-->
    <script src="/assets/website/js/frontend/clash_meta/jquery-3.5.1.min.js"></script><!-- default jQuery -->
    <script src="/assets/website/js/frontend/clash_meta/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- bootstrap js -->
    <script src="/assets/website/js/frontend/clash_meta/bootstrap.min.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>